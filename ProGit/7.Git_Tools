This chapter is pretty much ch.2, but explore advance commands in more depth. also
should be the longest chapter in the book.

To refer to commit:
    1. full SHA-1 hash
    2. partial SHA-1 hash, usually four char is enough

Others:
    1. it is possible to add a signed tag to ensure code security, though
    doing this need the effort of entire team knows how to use the tag tools.

commands:
    1. git show [hash]/[branch]: show the commit info.
    2. git log --abbrev-commit show short version of SHA
    3. (low level) git rev-parse: get SHA from name
    4. *git reflog: log of where HEAD and branch referenve have been from
                    last few months
        syntax variation:
        a. "HEAD/main@{5}" can be use in git log too
        b. main@{yesterday}, main@{2.months.ago}
        c. HEAD^: "^" show ancestor commit. can stack them
                  "^2" on merge case resolve which parent commit to follow, doesn't mean "^^"
        d. HEAD~: "~"specify number of commits, can be use with ^, e.g. HEAD~3^2
    5. Double Dot(..): range of commits that are reachable from one commit but aren't reachable from another.
                        i.e. what hasn't been merged
    6. Triple Dot: all commits reachable by either of two ref but not by both of them
    7. more on git add
         -i: interactive mode for git add
            patch: allow selection of which part to commit

    *8. git stash: save working directory state (e.g. for switching branch).
            a. -list: previous stashes
            b. git stash apply: no args mean latest stash. otherwise git stash apply stash@{2}
            c. git stash apply --index: return the staged file state also, though it could fails due to conflict
            d. --keep-index: do not stash anything in staging
            e. -u: default stash only tracked files, this stash any untracked files as well
            f. git stash [stash branch name]:  recover stash in new branch
    9. git clean: !remove untracked file. do a dry run with -n
    10. git grep: bash grep but faster, and can search through pass commit/tree, not just current working dir
                  -n: get # of line in doc
                  -p: get the function name oof search text appearance
    11. git log: -S to search for string first appearence in commits history
                 -L to see every changes made to a function
    12. git commit: --amend: to change last commit message, it will change the SHA-1,
                    so don't amend something that is public
    13. git rebase: -i, interactively reorder and change prevoius commits message
                    "squash" will put multiple commits in one
    14. git filter-branch --tree-filter 'rm -f <filename>' HEAD to remove a file from all commit, try do this on
        a test branch first, then do it on main

reset & checkout dive: there is three tree in git
    1. HEAD: last commit snapshot, next parent
    2. Index (Staging Area): proposed next commit snapshot
    3. Working Directory: Sandbox

    git checkout will changes HEAD to point to another branch ref, hence populate
    Index with with the snapshot of that commit, then copies contents of the Index to working Directory.

    what git reset does:
        1. move HEAD: moves the branch that HEAD is point to. (different than checkout, where it is just changing the HEAD)
                      this is what git reset --soft does, without changing INDEX, working directory
        2. Updating Index: update the Index area and unstaged everything (git reset --remix, can be without --remix as it is default)
        3. Updating working directory: the only way to destory data and without comeback

    Variation:
        a. if filepath is provided, i.e. git reset file.txt. Step 1 above will be skipped, since can't 
        partially move a branch for some file but not others. Hence it will stop at step 2 after taking file.txt off Index.
        So git reset a file is the opposite of git add a file.
        b. git reset <commit SHA> <filename>. This will restore the file to that commit version.

    git checkout is similar to reset --hard, as it change all 3 environment, with difference:
    1. workink dir won't have data loss.
    2. checkout move HEAD to branch, instead of branch to HEAD (figure 7-19)
